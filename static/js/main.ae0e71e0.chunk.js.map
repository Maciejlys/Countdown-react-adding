{"version":3,"sources":["Utils/dateUtil.ts","Components/Loading.tsx","Components/Counter.tsx","Components/Counters.tsx","Components/DataOverlay.tsx","Components/DataManager.tsx","Components/Navbar.tsx","App.tsx","index.tsx"],"names":["countDownInterval","dueDate","dueTime","now","Date","getTime","distance","getTotalTime","Math","floor","Loading","className","Counter","id","name","useState","targetTime","setTargetTime","isLoading","setIsLoading","isExpired","setIsExpired","useEffect","interval","setInterval","newDate","forEach","date","clearInterval","days","hours","minutes","seconds","Counters","counters","index","uuidv4","require","v4","convertDate","d","parse","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","DataOverlay","removeCounter","addCounter","setIsOpen","isOverlay","setIsOverlay","setName","setDate","time","setTime","style","textAlign","map","counter","onClick","type","onSubmit","event","preventDefault","length","newTimer","onChange","e","target","value","placeholder","maxLength","autoFocus","DataManager","isOpen","Navbar","names","setIndex","current","getNames","data","getLocalStorage","temp","JSON","localStorage","getItem","stringify","App","setCounters","setNames","setTimeout","newCounter","newCounters","push","setItem","filter","c","window","location","reload","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae0e71e0.chunk.js","sourcesContent":["const getTotalTime = (dueDate: string, dueTime: string) => {\r\n  return new Date(dueDate + \" \" + dueTime).getTime();\r\n};\r\n\r\nexport const countDownInterval = (dueDate: string, dueTime: string) => {\r\n  const now = new Date().getTime();\r\n\r\n  var distance = getTotalTime(dueDate, dueTime) - now;\r\n\r\n  var days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n  var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n  var seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n  return [days, hours, minutes, seconds];\r\n};\r\n","import React from \"react\";\r\nimport \"../Styles/Loading.css\";\r\n\r\ninterface LoadingProps {}\r\n\r\nexport const Loading: React.FC<LoadingProps> = () => {\r\n  return (\r\n    <div className=\"loading\">\r\n      <div className=\"loader\"></div>\r\n      <h1>Loading</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { SingleCounter } from \"./Counters\";\r\nimport { countDownInterval } from \"../Utils/dateUtil\";\r\nimport { Loading } from \"./Loading\";\r\nimport \"../Styles/Counter.css\";\r\n\r\nexport const Counter: React.FC<SingleCounter> = ({\r\n  id,\r\n  name,\r\n  dueDate,\r\n  dueTime,\r\n}) => {\r\n  const [targetTime, setTargetTime] = useState([0, 0, 0, 0]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isExpired, setIsExpired] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    let interval = setInterval(() => {\r\n      setTargetTime(() => {\r\n        setIsLoading(false);\r\n        let newDate = countDownInterval(dueDate, dueTime);\r\n        newDate.forEach((date) => {\r\n          if (date < 0) {\r\n            setIsExpired(true);\r\n            clearInterval(interval);\r\n          } else {\r\n            setIsExpired(false);\r\n          }\r\n        });\r\n        return newDate;\r\n      });\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [id, dueTime, dueDate]);\r\n\r\n  const [days, hours, minutes, seconds] = targetTime;\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n  if (isExpired) {\r\n    return <span className=\"up\">The time is up!</span>;\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"timers\">\r\n        <div className=\"timer\">\r\n          <header className=\"big-text\">{days}</header>\r\n          <footer className=\"small-text\">days</footer>\r\n        </div>\r\n        <div className=\"timer\">\r\n          <header className=\"big-text\">{hours}</header>\r\n          <footer className=\"small-text\">hours</footer>\r\n        </div>\r\n        <div className=\"timer\">\r\n          <header className=\"big-text\">{minutes}</header>\r\n          <footer className=\"small-text\">minutes</footer>\r\n        </div>\r\n        <div className=\"timer\">\r\n          <header className=\"big-text\">{seconds}</header>\r\n          <footer className=\"small-text\">seconds</footer>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Counter } from \"./Counter\";\r\nimport \"../Styles/Counters.css\";\r\n\r\nexport interface CountersProps {\r\n  counters: SingleCounter[];\r\n  index: number;\r\n}\r\n\r\nexport interface SingleCounter {\r\n  id: string;\r\n  name: string;\r\n  dueDate: string;\r\n  dueTime: string;\r\n}\r\n\r\nexport const Counters: React.FC<CountersProps> = ({ counters, index }) => {\r\n  return (\r\n    <section className=\"mid\">\r\n      <div className=\"name\">\r\n        <h2>{counters[index].name}</h2>\r\n      </div>\r\n      <div className=\"counter\">\r\n        <Counter {...counters[index]} />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"../Styles/DataOverlay.css\";\r\nimport { SingleCounter } from \"./Counters\";\r\nimport { AiFillDelete } from \"react-icons/ai\";\r\nimport { BsFillPlusCircleFill } from \"react-icons/bs\";\r\nimport { BiAlarmAdd } from \"react-icons/bi\";\r\nimport { AiFillBackward } from \"react-icons/ai\";\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\n\r\ninterface DataOverlayProps {\r\n  counters: SingleCounter[];\r\n  removeCounter: (id: string) => void;\r\n  addCounter: (counter: SingleCounter) => void;\r\n  setIsOpen: (isOpen: boolean) => void;\r\n}\r\n\r\nconst convertDate = (date: string) => {\r\n  const d = Date.parse(date);\r\n  const ye = new Intl.DateTimeFormat(\"en\", { year: \"numeric\" }).format(d);\r\n  const mo = new Intl.DateTimeFormat(\"en\", { month: \"short\" }).format(d);\r\n  const da = new Intl.DateTimeFormat(\"en\", { day: \"2-digit\" }).format(d);\r\n  const joined = `${mo} ${da}, ${ye}`;\r\n\r\n  return joined;\r\n};\r\n\r\nexport const DataOverlay: React.FC<DataOverlayProps> = ({\r\n  counters,\r\n  removeCounter,\r\n  addCounter,\r\n  setIsOpen,\r\n}) => {\r\n  const [isOverlay, setIsOverlay] = useState(false);\r\n  const [name, setName] = useState(\"Example\");\r\n  const [date, setDate] = useState(\"Dec 5, 2025\");\r\n  const [time, setTime] = useState(\"12:00:00\");\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    if (counters.length === 8) return;\r\n    setName(\"Example\");\r\n    const newTimer = {\r\n      id: `${uuidv4()}`,\r\n      name: `${name}`,\r\n      dueDate: `${convertDate(date)}`,\r\n      dueTime: `${time}`,\r\n    };\r\n    setIsOverlay(false);\r\n    addCounter(newTimer);\r\n  };\r\n\r\n  return (\r\n    <div className=\"overlay\">\r\n      <h1 style={{ textAlign: \"center\" }}>Yours countodwns:</h1>\r\n      <div className=\"center-overlay counterer\">\r\n        {counters.map((counter) => {\r\n          return (\r\n            <div key={counter.id} className=\"single-counter\">\r\n              <h4>{counter.name}</h4>\r\n              <button\r\n                key={counter.id}\r\n                className=\"btn-add\"\r\n                onClick={() => removeCounter(counter.id)}>\r\n                <AiFillDelete className=\"btn-delete\" />\r\n              </button>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"btn-add-container\">\r\n        <button className=\"btn-add\" onClick={() => setIsOverlay(!isOverlay)}>\r\n          <BsFillPlusCircleFill className=\"add\" />\r\n        </button>\r\n      </div>\r\n      <div className=\"btn-back\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-add\"\r\n          onClick={() => setIsOpen(false)}>\r\n          <AiFillBackward className=\"add  back\" />\r\n        </button>\r\n      </div>\r\n      {isOverlay && (\r\n        <div className=\"overlay\">\r\n          <form className=\"center-overlay inputs\" onSubmit={handleSubmit}>\r\n            <h1>Add your countdown:</h1>\r\n            <div className=\"input-txt\">\r\n              <input\r\n                type=\"text\"\r\n                onChange={(e) => setName(e.target.value)}\r\n                placeholder=\"Name\"\r\n                maxLength={25}\r\n                autoFocus\r\n              />\r\n            </div>\r\n            <input type=\"date\" onChange={(e) => setDate(e.target.value)} />\r\n            <input type=\"time\" onChange={(e) => setTime(e.target.value)} />\r\n            <div className=\"add-container\">\r\n              <button type=\"submit\" className=\"btn-add\">\r\n                <BiAlarmAdd className=\"add\" />\r\n              </button>\r\n            </div>\r\n          </form>\r\n          <div className=\"btn-back\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn-add\"\r\n              onClick={() => setIsOverlay(!isOverlay)}>\r\n              <AiFillBackward className=\"add  back\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { BiTable } from \"react-icons/bi\";\r\nimport \"../Styles/DataManager.css\";\r\nimport { DataOverlay } from \"./DataOverlay\";\r\nimport { SingleCounter } from \"./Counters\";\r\n\r\ninterface DataManagerProps {\r\n  counters: SingleCounter[];\r\n  removeCounter: (id: string) => void;\r\n  addCounter: (counter: SingleCounter) => void;\r\n}\r\n\r\nexport const DataManager: React.FC<DataManagerProps> = ({\r\n  counters,\r\n  removeCounter,\r\n  addCounter,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  return (\r\n    <div className=\"btn-add-container\">\r\n      <button className=\"btn-add\" onClick={() => setIsOpen(!isOpen)}>\r\n        <BiTable className=\"add\" />\r\n      </button>\r\n      {isOpen ? (\r\n        <DataOverlay\r\n          addCounter={addCounter}\r\n          removeCounter={removeCounter}\r\n          counters={counters || []}\r\n          setIsOpen={setIsOpen}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"../Styles/Navbar.css\";\r\n\r\ninterface NavbarProps {\r\n  names: string[];\r\n  setIndex: (index: number) => void;\r\n  current: number;\r\n}\r\n\r\nexport const Navbar: React.FC<NavbarProps> = ({ names, setIndex, current }) => {\r\n  return (\r\n    <nav className=\"nav\">\r\n      <div className=\"line\"></div>\r\n      {names.map((name, index) => {\r\n        return (\r\n          <button\r\n            key={index}\r\n            className={`btn ${index === current && \"active-btn\"}`}\r\n            onClick={() => setIndex(index)}>\r\n            {name}\r\n          </button>\r\n        );\r\n      })}\r\n    </nav>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Counters, SingleCounter } from \"./Components/Counters\";\nimport { DataManager } from \"./Components/DataManager\";\nimport { Loading } from \"./Components/Loading\";\nimport { Navbar } from \"./Components/Navbar\";\n\nconst getNames = (data: SingleCounter[]) => {\n  return data.map((name) => name.name);\n};\n\nconst getLocalStorage = () => {\n  const temp = JSON.parse(localStorage.getItem(\"data\") || \"[]\");\n\n  if (JSON.stringify(temp) === \"[]\") {\n    return false;\n  }\n\n  return temp;\n};\n\nfunction App() {\n  const [counters, setCounters] = useState<SingleCounter[]>([]);\n  const [names, setNames] = useState([\"\"]);\n  const [index, setIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const removeCounter = (id: string) => {\n    setIndex(0);\n    const newCounters = counters.filter((c: SingleCounter) => c.id !== id);\n    localStorage.setItem(\"data\", JSON.stringify(newCounters));\n    if (JSON.stringify(newCounters) !== \"[]\") {\n      setCounters(getLocalStorage());\n      setNames(getNames(getLocalStorage()));\n    } else {\n      window.location.reload();\n    }\n  };\n\n  const addCounter = (newCounter: SingleCounter) => {\n    const newCounters = counters;\n    newCounters.push(newCounter);\n    localStorage.setItem(\"data\", JSON.stringify(newCounters));\n    setNames(getNames(getLocalStorage()));\n  };\n\n  useEffect(() => {\n    if (getLocalStorage()) {\n      setNames(getNames(getLocalStorage()));\n      setCounters(getLocalStorage());\n    }\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <main>\n      <main className={`load ${!isLoading && \"loaded\"}`}>\n        <Loading />\n      </main>\n      {counters.length > 0 && (\n        <>\n          <Navbar names={names} setIndex={setIndex} current={index} />\n          <Counters counters={counters || []} index={index} />\n        </>\n      )}\n      <DataManager\n        addCounter={addCounter}\n        counters={counters || []}\n        removeCounter={removeCounter}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}